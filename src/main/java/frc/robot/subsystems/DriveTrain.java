// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

//hello

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax left1;
private CANSparkMax left2;
private MotorControllerGroup leftMotorGroup;
private CANSparkMax right1;
private CANSparkMax right2;
private MotorControllerGroup rightMotorGroup;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
left1 = new CANSparkMax(1, MotorType.kBrushless);
 
 left1.restoreFactoryDefaults();  
left1.setInverted(true);
left1.setIdleMode(IdleMode.kCoast);
left1.burnFlash();
  

left2 = new CANSparkMax(2, MotorType.kBrushless);
 
 left2.restoreFactoryDefaults();  
left2.setInverted(true);
left2.setIdleMode(IdleMode.kCoast);
left2.burnFlash();
  

leftMotorGroup = new MotorControllerGroup(left1, left2  );
 addChild("Left Motor Group",leftMotorGroup);
 

right1 = new CANSparkMax(4, MotorType.kBrushless);
 
 right1.restoreFactoryDefaults();  
right1.setInverted(false);
right1.setIdleMode(IdleMode.kCoast);
right1.burnFlash();
  

right2 = new CANSparkMax(3, MotorType.kBrushless);
 
 right2.restoreFactoryDefaults();  
right2.setInverted(false);
right2.setIdleMode(IdleMode.kCoast);
right2.burnFlash();
  

rightMotorGroup = new MotorControllerGroup(right1, right2  );
 addChild("Right Motor Group",rightMotorGroup);
 

differentialDrive1 = new DifferentialDrive(leftMotorGroup, rightMotorGroup);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_driveArcade(double xSpeed, double zRotation) {
        differentialDrive1.arcadeDrive(xSpeed, zRotation);
    }
}

